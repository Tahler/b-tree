BTree {
  FileManager fileManager
  int rootLocation

  BTree(String name) {
    fileManager = new FileManager(this, name)
    rootLocation = 0
  }

  static void create(String name) {
    if File.exists(name) {
      // error
    }
  	BTree tree = new BTree(name)
    Node startingNode = new Node(tree, 0, true)
    tree.fileManager.writeNode(startingNode)
  }

  static BTree open(String name) {
    if !File.exists(name) {
      // error
    }
    return new BTree(name)
  }

  static void delete(String name) {
    File.delete(name)
  }

  void close() {
    this.fileManager.close()
  }

  void addKey(int key, int value) {
    Node root = fileManager.readNode(this.rootLocation)
    root.addKey(key, value)
  }

  int getValue(int key) {
    Node root = fileManager.readNode(this.rootLocation)
    return root.getValue(key)
  }

  void updateKeysValue(int key, int value) {
    Node root = fileManager.readNode(this.rootLocation)
    root.updateKeysValue(key, value)
  }
}

FileManager {
  BTree tree
  RandomAccessFile file
  int nextAvailableSlot

  FileManager(String filePath) {
    file = new RandomAccessFile(filePath)
  }

  void close() {
    this.file.close()
  }

  void writeNode(Node node) {
    int startLocation = node.location;
    this.file.seek(startLocation);
    bool isLeaf = node instanceof LeafNode
    this.file.writeBoolean(isLeaf);
    this.file.writeInt(node.size);

    foreach (kvp in node.data) {
        this.file.writeInt(kvp.key);
        this.file.writeInt(kvp.value);
    }
    if startLocation = this.nextAvailableSlot {
      this.nextAvailableSlot = this.file.pointer
    }
  }

  Node readNode(int location) {
    this.file.seek(location)
    bool isLeaf = this.file.readBool()
    int size = this.file.readInt()

    KeyValuePair[] data = new KeyValuePair[Node.CAPACITY]
    for i in 0..size {
        int key = this.file.readInt()
        int value = this.file.readInt()
        data[i] = new KeyValuePair(key, value)
    }
    if isLeaf {
      return new LeafNode(tree, location, size, data)
    } else {
      return new Node(tree, location, size, data)
    }
  }
}

Node {
  static final int CAPACITY

  BTree tree
  Node parent
  int location
  int size
  KeyValuePair[] data

  Node(BTree tree) {
    this(tree, 0)
  }

  Node(BTree tree, int location) {
    this(tree, location, 0, new KeyValuePair[CAPACITY])
  }

  Node(BTree tree, int location, int size, KeyValuePair[] data) {
    tree = tree
    location = location
    size = size
    data = data
  }

  bool isFull() {
    return size == CAPACITY
  }

  KeyValuePair routeToKey(int key) {
    int max = this.data[this.size - 1];
    if key > max.key {
      return max
    }
    foreach kvp in this.data IN REVERSE {
      if key <= kvp.key {
        return kvp
      }
    }
    // error
  }

  void addKey(int key, int value) {
    KeyValuePair route = this.routeToKey(key)
    int location = route.value
    int maxBeforeAdd = this.data[this.size - 1]
    Node child = this.tree.fileManager.readNode(location)
    int childMax = child.addKey(key, value)
    if childMax > route.key {
      sortRight(routeIndex)
    }
    if this.parent != null && childMax > maxBeforeAdd {
      this.parent.updateKey(this.location, childMax)
    }
  }

  void insertKeyFromChild(int key, int value) {
    if this.isFull() {
      this.splitAndAdd(this, key, value)
    } else {
      // can only be a larger key
      this.data[this.size - 1] = new KeyValuePair(key, value)
      this.tree.fileManager.writeNode(this)
    }
  }

  void updateKey(int location, int key) {
    // binary search
    int lower = 0;
    int upper = this.size;
    while lower <= upper {
        int mid = (lower + upper) / 2;
        int midValue = this.data[mid].value;
        if midValue < location) {
            lower = mid + 1;
        } else if (midValue > location) {
            upper = mid - 1;
        } else {
            this.data[mid].key = key;
            this.tree.fileManager.writeNode(this)
            return;
        }
    }
  }

  // bubble sort to the right (keys can only get larger with add)
  void sortRight(int index) {
    for i in index..this.size - 1 {
      KeyValuePair left = this.data[i]
      KeyValuePair right = this.data[i + 1]
      if left.key > right.key {
        KeyValuePair temp = left
        this.data[i] = right
        this.data[i + 1] = temp
      }
    }
  }

  int getValue(int key) {
    KeyValuePair route = this.routeToKey(key)
    int location = route.value
    Node child = this.tree.fileManager.readNode(child)
    return child.getValue(key)
  }

  void updateKeysValue(int key, int value) {
    KeyValuePair route = this.routeToKey(key)
    int location = route.value
    Node child = this.tree.fileManager.readNode(child)
    child.updateKeysValue(key, value)
    this.tree.fileManager.writeNode(this)
  }

  void splitAndAdd(int key, int value) {
    int splittingIndex = this.size / 2

    KeyValuePair[] otherData = this.data[splittingIndex..this.size]

    Node other = if this instanceof LeafNode {
      new LeafNode(
          this.tree, this.tree.fileManager.nextAvailableSlot,
          this.size / 2, otherData)
    } else {
      new Node(
          this.tree, this.tree.fileManager.nextAvailableSlot,
          this.size / 2, otherData)
      )
    }

    this.size = this.size - this.size / 2

    this.data = this.data[0..splittingIndex]

    if key > this.data[splittingIndex] {
      other.addKey(key, value)
    } else {
      this.addKey(key, value)
    }

    this.tree.fileManager.writeNode(this)
    this.tree.fileManager.writeNode(other)

    int thisMax = this.data[this.size - 1].key
    int otherMax = this.data[this.size - 1].key

    if this.parent = null {
      KeyValuePair[] parentData = new KeyValuePair[] {
        new KeyValuePair(thisMax, this.location)
        new KeyValuePair(otherMax, other.location)
      }
      Node parent = new Node(this.tree, this.tree.fileManager.nextAvailableSlot,
          2, parentData)
      this.tree.fileManager.writeNode(parent)
      this.tree.root = parent
      this.parent = parent
    } else {
      this.parent.insertKeyFromChild(otherMax, other.location)
      this.parent.updateKey(this.location)
    }
  }
}

LeafNode extends Node {
  KeyValuePair searchForKvp(int key) {
    // binary search
    int lower = 0;
    int upper = this.size;
    while lower <= upper {
        int mid = (lower + upper) / 2;
        int midKey = this.data[mid].key;
        if midKey < key) {
            lower = mid + 1;
        } else if (midKey > key) {
            upper = mid - 1;
        } else {
            return this.data[mid];
        }
    }
  }

  override int getValue(int key) {
    return this.searchForKvp(key).value
  }

  override void updateKeysValue(int key, int value) {
    KeyValuePair toBeUpdated = this.searchForKvp(key)
    toBeUpdated.value = value
  }

  override void addKey(int key, int value) {
    if this.isFull() {
      this.splitAndAdd(key, value)
    } else {
      int writeIndex = this.size
      int readIndex = this.size - 1
      int maxBeforeAdd = this.data[readIndex].key
      while readIndex >= 0 && this.data[readIndex].key > key {
        this.data[writeIndex] = this.data[readIndex]
        writeIndex -= 1
        readIndex -= 1
      }
      if readIndex >= 0 && this.data[readIndex] = key {
        // error: key already exists
      }
      this.data[writeIndex] = new KeyValuePair(key, value)
      this.size += 1

      if key > maxBeforeAdd {
        this.parent.updateKey(this.location)
      }
    }
  }
}
